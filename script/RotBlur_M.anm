--track0:X,-10000,10000,0
--track1:Y,-10000,10000,0
--track2:amount,0,1800,30
--track3:r_pos,-100,100,0
--dialog:keep_size/chk,_1=1;quality,_2=256;reload/chk,_3=0;PI,_0=nil

obj.setanchor("track", 0, "line")

-- 変換もする
_0 = _0 or {}
local x = _0[1] or obj.track0
local y = _0[2] or obj.track1
-- 2方向なのであらかじめ2で割る
local amount = (_0[3] or obj.track2) / 360 * math.pi
-- ティム氏のものと挙動を合わせるためマイナス
local r_pos = (_0[4] or obj.track3) / -100
-- ティム氏のものをexo書き換えで適用しても正常に動作するよう、ckもチェックしておく
local keep_size = (_1 or ck or 1) ~= 0
-- 角度解像度ダウンも疑似的に(計算方法を確認していないため、不正確)
local quality = math.max(math.floor(_2 or (amount * 80 / sdw) or 200), 1)
local reload = (_3 or 0) ~= 0

_0 = nil
_1 = nil
_2 = nil
_3 = nil

local RotBlur_M = require("RotBlur_M")
RotBlur_M.RotBlur_M(x, y, amount, r_pos, keep_size, quality, reload)
